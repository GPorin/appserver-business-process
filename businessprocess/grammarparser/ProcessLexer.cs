//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Process.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ProcessLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INCLUDE=1, PROPERTIES=2, START=3, END=4, INIT=5, WORD=6, COMMAND=7, GAMECOMMANDS=8, 
		CONDITIONCOMMAND=9, IF=10, THEN=11, ELSE=12, WHITESPACE=13, NEWLINE=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LOWERCASE", "UPPERCASE", "NUMBERS", "INCLUDE", "PROPERTIES", "START", 
		"END", "INIT", "WORD", "COMMAND", "GAMECOMMANDS", "CONDITIONCOMMAND", 
		"IF", "THEN", "ELSE", "WHITESPACE", "NEWLINE"
	};


	public ProcessLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ProcessLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'Include'", "'Properties'", "'Start'", "'End'", "'Init'", null, 
		"'Command'", null, "'ConditionCommand'", "'If'", "'Then'", "'Else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INCLUDE", "PROPERTIES", "START", "END", "INIT", "WORD", "COMMAND", 
		"GAMECOMMANDS", "CONDITIONCOMMAND", "IF", "THEN", "ELSE", "WHITESPACE", 
		"NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Process.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ProcessLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,232,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
		1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,4,8,78,8,8,11,8,12,
		8,79,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,3,10,185,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,
		13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,4,15,218,8,15,11,15,12,
		15,219,1,15,1,15,1,16,3,16,225,8,16,1,16,1,16,4,16,229,8,16,11,16,12,16,
		230,0,0,17,1,0,3,0,5,0,7,1,9,2,11,3,13,4,15,5,17,6,19,7,21,8,23,9,25,10,
		27,11,29,12,31,13,33,14,1,0,4,1,0,97,122,1,0,65,90,1,0,48,57,2,0,9,9,32,
		32,240,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
		0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,37,1,0,0,
		0,5,39,1,0,0,0,7,41,1,0,0,0,9,49,1,0,0,0,11,60,1,0,0,0,13,66,1,0,0,0,15,
		70,1,0,0,0,17,77,1,0,0,0,19,81,1,0,0,0,21,184,1,0,0,0,23,186,1,0,0,0,25,
		203,1,0,0,0,27,206,1,0,0,0,29,211,1,0,0,0,31,217,1,0,0,0,33,228,1,0,0,
		0,35,36,7,0,0,0,36,2,1,0,0,0,37,38,7,1,0,0,38,4,1,0,0,0,39,40,7,2,0,0,
		40,6,1,0,0,0,41,42,5,73,0,0,42,43,5,110,0,0,43,44,5,99,0,0,44,45,5,108,
		0,0,45,46,5,117,0,0,46,47,5,100,0,0,47,48,5,101,0,0,48,8,1,0,0,0,49,50,
		5,80,0,0,50,51,5,114,0,0,51,52,5,111,0,0,52,53,5,112,0,0,53,54,5,101,0,
		0,54,55,5,114,0,0,55,56,5,116,0,0,56,57,5,105,0,0,57,58,5,101,0,0,58,59,
		5,115,0,0,59,10,1,0,0,0,60,61,5,83,0,0,61,62,5,116,0,0,62,63,5,97,0,0,
		63,64,5,114,0,0,64,65,5,116,0,0,65,12,1,0,0,0,66,67,5,69,0,0,67,68,5,110,
		0,0,68,69,5,100,0,0,69,14,1,0,0,0,70,71,5,73,0,0,71,72,5,110,0,0,72,73,
		5,105,0,0,73,74,5,116,0,0,74,16,1,0,0,0,75,78,3,1,0,0,76,78,3,3,1,0,77,
		75,1,0,0,0,77,76,1,0,0,0,78,79,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,
		18,1,0,0,0,81,82,5,67,0,0,82,83,5,111,0,0,83,84,5,109,0,0,84,85,5,109,
		0,0,85,86,5,97,0,0,86,87,5,110,0,0,87,88,5,100,0,0,88,20,1,0,0,0,89,90,
		5,71,0,0,90,91,5,101,0,0,91,92,5,116,0,0,92,93,5,67,0,0,93,94,5,108,0,
		0,94,95,5,97,0,0,95,96,5,115,0,0,96,97,5,115,0,0,97,98,5,78,0,0,98,99,
		5,117,0,0,99,100,5,109,0,0,100,101,5,98,0,0,101,102,5,101,0,0,102,185,
		5,114,0,0,103,104,5,71,0,0,104,105,5,101,0,0,105,106,5,116,0,0,106,107,
		5,71,0,0,107,108,5,114,0,0,108,109,5,111,0,0,109,110,5,117,0,0,110,111,
		5,112,0,0,111,112,5,78,0,0,112,113,5,117,0,0,113,114,5,109,0,0,114,115,
		5,98,0,0,115,116,5,101,0,0,116,185,5,114,0,0,117,118,5,67,0,0,118,119,
		5,104,0,0,119,120,5,101,0,0,120,121,5,99,0,0,121,122,5,107,0,0,122,123,
		5,65,0,0,123,124,5,116,0,0,124,125,5,116,0,0,125,126,5,101,0,0,126,127,
		5,110,0,0,127,128,5,100,0,0,128,129,5,97,0,0,129,130,5,110,0,0,130,131,
		5,99,0,0,131,185,5,101,0,0,132,133,5,71,0,0,133,134,5,101,0,0,134,135,
		5,116,0,0,135,136,5,76,0,0,136,137,5,101,0,0,137,138,5,99,0,0,138,139,
		5,116,0,0,139,140,5,117,0,0,140,141,5,114,0,0,141,142,5,101,0,0,142,143,
		5,78,0,0,143,144,5,97,0,0,144,145,5,109,0,0,145,185,5,101,0,0,146,147,
		5,84,0,0,147,148,5,117,0,0,148,149,5,114,0,0,149,150,5,110,0,0,150,151,
		5,79,0,0,151,152,5,110,0,0,152,153,5,80,0,0,153,154,5,114,0,0,154,155,
		5,111,0,0,155,156,5,106,0,0,156,157,5,101,0,0,157,158,5,99,0,0,158,159,
		5,116,0,0,159,160,5,111,0,0,160,185,5,114,0,0,161,162,5,79,0,0,162,163,
		5,112,0,0,163,164,5,101,0,0,164,165,5,110,0,0,165,166,5,76,0,0,166,167,
		5,101,0,0,167,168,5,99,0,0,168,169,5,116,0,0,169,170,5,117,0,0,170,171,
		5,114,0,0,171,185,5,101,0,0,172,173,5,87,0,0,173,174,5,97,0,0,174,175,
		5,105,0,0,175,176,5,116,0,0,176,177,5,84,0,0,177,178,5,111,0,0,178,179,
		5,70,0,0,179,180,5,105,0,0,180,181,5,110,0,0,181,182,5,105,0,0,182,183,
		5,115,0,0,183,185,5,104,0,0,184,89,1,0,0,0,184,103,1,0,0,0,184,117,1,0,
		0,0,184,132,1,0,0,0,184,146,1,0,0,0,184,161,1,0,0,0,184,172,1,0,0,0,185,
		22,1,0,0,0,186,187,5,67,0,0,187,188,5,111,0,0,188,189,5,110,0,0,189,190,
		5,100,0,0,190,191,5,105,0,0,191,192,5,116,0,0,192,193,5,105,0,0,193,194,
		5,111,0,0,194,195,5,110,0,0,195,196,5,67,0,0,196,197,5,111,0,0,197,198,
		5,109,0,0,198,199,5,109,0,0,199,200,5,97,0,0,200,201,5,110,0,0,201,202,
		5,100,0,0,202,24,1,0,0,0,203,204,5,73,0,0,204,205,5,102,0,0,205,26,1,0,
		0,0,206,207,5,84,0,0,207,208,5,104,0,0,208,209,5,101,0,0,209,210,5,110,
		0,0,210,28,1,0,0,0,211,212,5,69,0,0,212,213,5,108,0,0,213,214,5,115,0,
		0,214,215,5,101,0,0,215,30,1,0,0,0,216,218,7,3,0,0,217,216,1,0,0,0,218,
		219,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,222,6,
		15,0,0,222,32,1,0,0,0,223,225,5,13,0,0,224,223,1,0,0,0,224,225,1,0,0,0,
		225,226,1,0,0,0,226,229,5,10,0,0,227,229,5,13,0,0,228,224,1,0,0,0,228,
		227,1,0,0,0,229,230,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,34,1,0,
		0,0,8,0,77,79,184,219,224,228,230,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
