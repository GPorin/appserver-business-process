//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Process.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ProcessParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INCLUDE=1, PROPERTIES=2, START=3, END=4, INIT=5, WORD=6, COMMAND=7, GAMECOMMANDS=8, 
		CONDITIONCOMMAND=9, IF=10, THEN=11, ELSE=12, WHITESPACE=13, NEWLINE=14;
	public const int
		RULE_process = 0, RULE_initProcess = 1, RULE_objectWithProperty = 2, RULE_objectProperties = 3, 
		RULE_property = 4, RULE_chainOfCommands = 5, RULE_simplecommand = 6, RULE_conditioncommand = 7;
	public static readonly string[] ruleNames = {
		"process", "initProcess", "objectWithProperty", "objectProperties", "property", 
		"chainOfCommands", "simplecommand", "conditioncommand"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Include'", "'Properties'", "'Start'", "'End'", "'Init'", null, 
		"'Command'", null, "'ConditionCommand'", "'If'", "'Then'", "'Else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INCLUDE", "PROPERTIES", "START", "END", "INIT", "WORD", "COMMAND", 
		"GAMECOMMANDS", "CONDITIONCOMMAND", "IF", "THEN", "ELSE", "WHITESPACE", 
		"NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Process.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ProcessParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ProcessParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ProcessParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProcessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(ProcessParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitProcessContext initProcess() {
			return GetRuleContext<InitProcessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(ProcessParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ProcessParser.Eof, 0); }
		public ProcessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_process; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.EnterProcess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.ExitProcess(this);
		}
	}

	[RuleVersion(0)]
	public ProcessContext process() {
		ProcessContext _localctx = new ProcessContext(Context, State);
		EnterRule(_localctx, 0, RULE_process);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			Match(START);
			State = 17;
			initProcess();
			State = 18;
			Match(END);
			State = 19;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitProcessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(ProcessParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectWithPropertyContext objectWithProperty() {
			return GetRuleContext<ObjectWithPropertyContext>(0);
		}
		public InitProcessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initProcess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.EnterInitProcess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.ExitInitProcess(this);
		}
	}

	[RuleVersion(0)]
	public InitProcessContext initProcess() {
		InitProcessContext _localctx = new InitProcessContext(Context, State);
		EnterRule(_localctx, 2, RULE_initProcess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			Match(INIT);
			State = 22;
			objectWithProperty();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectWithPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(ProcessParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTIES() { return GetToken(ProcessParser.PROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectPropertiesContext objectProperties() {
			return GetRuleContext<ObjectPropertiesContext>(0);
		}
		public ObjectWithPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectWithProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.EnterObjectWithProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.ExitObjectWithProperty(this);
		}
	}

	[RuleVersion(0)]
	public ObjectWithPropertyContext objectWithProperty() {
		ObjectWithPropertyContext _localctx = new ObjectWithPropertyContext(Context, State);
		EnterRule(_localctx, 4, RULE_objectWithProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			Match(WORD);
			State = 25;
			Match(PROPERTIES);
			State = 26;
			objectProperties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectPropertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(ProcessParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public ObjectPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectProperties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.EnterObjectProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.ExitObjectProperties(this);
		}
	}

	[RuleVersion(0)]
	public ObjectPropertiesContext objectProperties() {
		ObjectPropertiesContext _localctx = new ObjectPropertiesContext(Context, State);
		EnterRule(_localctx, 6, RULE_objectProperties);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			Match(WORD);
			State = 29;
			property();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(ProcessParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainOfCommandsContext chainOfCommands() {
			return GetRuleContext<ChainOfCommandsContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 8, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			Match(INCLUDE);
			State = 32;
			chainOfCommands();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainOfCommandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimplecommandContext[] simplecommand() {
			return GetRuleContexts<SimplecommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimplecommandContext simplecommand(int i) {
			return GetRuleContext<SimplecommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditioncommandContext[] conditioncommand() {
			return GetRuleContexts<ConditioncommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditioncommandContext conditioncommand(int i) {
			return GetRuleContext<ConditioncommandContext>(i);
		}
		public ChainOfCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainOfCommands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.EnterChainOfCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.ExitChainOfCommands(this);
		}
	}

	[RuleVersion(0)]
	public ChainOfCommandsContext chainOfCommands() {
		ChainOfCommandsContext _localctx = new ChainOfCommandsContext(Context, State);
		EnterRule(_localctx, 10, RULE_chainOfCommands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 36;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMAND:
					{
					State = 34;
					simplecommand();
					}
					break;
				case CONDITIONCOMMAND:
					{
					State = 35;
					conditioncommand();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMAND || _la==CONDITIONCOMMAND );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplecommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND() { return GetToken(ProcessParser.COMMAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GAMECOMMANDS() { return GetToken(ProcessParser.GAMECOMMANDS, 0); }
		public SimplecommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplecommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.EnterSimplecommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.ExitSimplecommand(this);
		}
	}

	[RuleVersion(0)]
	public SimplecommandContext simplecommand() {
		SimplecommandContext _localctx = new SimplecommandContext(Context, State);
		EnterRule(_localctx, 12, RULE_simplecommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(COMMAND);
			State = 41;
			Match(GAMECOMMANDS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditioncommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONCOMMAND() { return GetToken(ProcessParser.CONDITIONCOMMAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ProcessParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ProcessParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimplecommandContext[] simplecommand() {
			return GetRuleContexts<SimplecommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimplecommandContext simplecommand(int i) {
			return GetRuleContext<SimplecommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditioncommandContext[] conditioncommand() {
			return GetRuleContexts<ConditioncommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditioncommandContext conditioncommand(int i) {
			return GetRuleContext<ConditioncommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ProcessParser.ELSE, 0); }
		public ConditioncommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditioncommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.EnterConditioncommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IProcessListener typedListener = listener as IProcessListener;
			if (typedListener != null) typedListener.ExitConditioncommand(this);
		}
	}

	[RuleVersion(0)]
	public ConditioncommandContext conditioncommand() {
		ConditioncommandContext _localctx = new ConditioncommandContext(Context, State);
		EnterRule(_localctx, 14, RULE_conditioncommand);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(CONDITIONCOMMAND);
			State = 44;
			Match(IF);
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 47;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMAND:
					{
					State = 45;
					simplecommand();
					}
					break;
				case CONDITIONCOMMAND:
					{
					State = 46;
					conditioncommand();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMAND || _la==CONDITIONCOMMAND );
			State = 51;
			Match(THEN);
			State = 54;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 54;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case COMMAND:
						{
						State = 52;
						simplecommand();
						}
						break;
					case CONDITIONCOMMAND:
						{
						State = 53;
						conditioncommand();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 56;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 58;
				Match(ELSE);
				State = 61;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 61;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case COMMAND:
							{
							State = 59;
							simplecommand();
							}
							break;
						case CONDITIONCOMMAND:
							{
							State = 60;
							conditioncommand();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 63;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,14,68,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,
		4,1,4,1,5,1,5,4,5,37,8,5,11,5,12,5,38,1,6,1,6,1,6,1,7,1,7,1,7,1,7,4,7,
		48,8,7,11,7,12,7,49,1,7,1,7,1,7,4,7,55,8,7,11,7,12,7,56,1,7,1,7,1,7,4,
		7,62,8,7,11,7,12,7,63,3,7,66,8,7,1,7,0,0,8,0,2,4,6,8,10,12,14,0,0,68,0,
		16,1,0,0,0,2,21,1,0,0,0,4,24,1,0,0,0,6,28,1,0,0,0,8,31,1,0,0,0,10,36,1,
		0,0,0,12,40,1,0,0,0,14,43,1,0,0,0,16,17,5,3,0,0,17,18,3,2,1,0,18,19,5,
		4,0,0,19,20,5,0,0,1,20,1,1,0,0,0,21,22,5,5,0,0,22,23,3,4,2,0,23,3,1,0,
		0,0,24,25,5,6,0,0,25,26,5,2,0,0,26,27,3,6,3,0,27,5,1,0,0,0,28,29,5,6,0,
		0,29,30,3,8,4,0,30,7,1,0,0,0,31,32,5,1,0,0,32,33,3,10,5,0,33,9,1,0,0,0,
		34,37,3,12,6,0,35,37,3,14,7,0,36,34,1,0,0,0,36,35,1,0,0,0,37,38,1,0,0,
		0,38,36,1,0,0,0,38,39,1,0,0,0,39,11,1,0,0,0,40,41,5,7,0,0,41,42,5,8,0,
		0,42,13,1,0,0,0,43,44,5,9,0,0,44,47,5,10,0,0,45,48,3,12,6,0,46,48,3,14,
		7,0,47,45,1,0,0,0,47,46,1,0,0,0,48,49,1,0,0,0,49,47,1,0,0,0,49,50,1,0,
		0,0,50,51,1,0,0,0,51,54,5,11,0,0,52,55,3,12,6,0,53,55,3,14,7,0,54,52,1,
		0,0,0,54,53,1,0,0,0,55,56,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,57,65,1,
		0,0,0,58,61,5,12,0,0,59,62,3,12,6,0,60,62,3,14,7,0,61,59,1,0,0,0,61,60,
		1,0,0,0,62,63,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,66,1,0,0,0,65,58,
		1,0,0,0,65,66,1,0,0,0,66,15,1,0,0,0,9,36,38,47,49,54,56,61,63,65
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
